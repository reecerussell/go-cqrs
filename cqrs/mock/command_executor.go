// Code generated by MockGen. DO NOT EDIT.
// Source: ../command_executor.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cqrs "github.com/reecerussell/go-cqrs/cqrs"
)

// MockCommandExecutor is a mock of CommandExecutor interface.
type MockCommandExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCommandExecutorMockRecorder
}

// MockCommandExecutorMockRecorder is the mock recorder for MockCommandExecutor.
type MockCommandExecutorMockRecorder struct {
	mock *MockCommandExecutor
}

// NewMockCommandExecutor creates a new mock instance.
func NewMockCommandExecutor(ctrl *gomock.Controller) *MockCommandExecutor {
	mock := &MockCommandExecutor{ctrl: ctrl}
	mock.recorder = &MockCommandExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandExecutor) EXPECT() *MockCommandExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCommandExecutor) Execute(ctx context.Context, cmd cqrs.CommandBase) *cqrs.ExecuteResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, cmd)
	ret0, _ := ret[0].(*cqrs.ExecuteResult)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCommandExecutorMockRecorder) Execute(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommandExecutor)(nil).Execute), ctx, cmd)
}
