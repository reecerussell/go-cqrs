// Code generated by MockGen. DO NOT EDIT.
// Source: ../command.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandBase is a mock of CommandBase interface.
type MockCommandBase struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBaseMockRecorder
}

// MockCommandBaseMockRecorder is the mock recorder for MockCommandBase.
type MockCommandBaseMockRecorder struct {
	mock *MockCommandBase
}

// NewMockCommandBase creates a new mock instance.
func NewMockCommandBase(ctrl *gomock.Controller) *MockCommandBase {
	mock := &MockCommandBase{ctrl: ctrl}
	mock.recorder = &MockCommandBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandBase) EXPECT() *MockCommandBaseMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockCommandBase) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockCommandBaseMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCommandBase)(nil).Validate))
}

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCommand) Execute(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCommandMockRecorder) Execute(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommand)(nil).Execute), ctx)
}

// Validate mocks base method.
func (m *MockCommand) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockCommandMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCommand)(nil).Validate))
}

// MockCommandWithValue is a mock of CommandWithValue interface.
type MockCommandWithValue struct {
	ctrl     *gomock.Controller
	recorder *MockCommandWithValueMockRecorder
}

// MockCommandWithValueMockRecorder is the mock recorder for MockCommandWithValue.
type MockCommandWithValueMockRecorder struct {
	mock *MockCommandWithValue
}

// NewMockCommandWithValue creates a new mock instance.
func NewMockCommandWithValue(ctrl *gomock.Controller) *MockCommandWithValue {
	mock := &MockCommandWithValue{ctrl: ctrl}
	mock.recorder = &MockCommandWithValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandWithValue) EXPECT() *MockCommandWithValueMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCommandWithValue) Execute(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCommandWithValueMockRecorder) Execute(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommandWithValue)(nil).Execute), ctx)
}

// Validate mocks base method.
func (m *MockCommandWithValue) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockCommandWithValueMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCommandWithValue)(nil).Validate))
}
